package org.royrvik.emrservice;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.*;
import java.util.Date;

public class PDFCreator {
    private static Font catFont = new Font(Font.FontFamily.HELVETICA, 18,
            Font.BOLD);
    private static Font subFont = new Font(Font.FontFamily.HELVETICA, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.HELVETICA, 12,
            Font.BOLD);
    private static Font smallerBold = new Font(Font.FontFamily.HELVETICA, 10,
            Font.BOLD);
    private static Font smallerItalic = new Font(Font.FontFamily.HELVETICA, 12,
            Font.NORMAL);

    private static java.util.List<String> examinationdata;
    private static java.util.List<String> imagePaths;
    private static java.util.List<String> notes;
    private static String username;

    public static ByteArrayOutputStream createPDF(java.util.List<String> e, java.util.List<String> i, java.util.List<String> n, String u){

        try {
            examinationdata = e;
            imagePaths = i;
            notes = n;
            username = u;


            Document document = new Document();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PdfWriter.getInstance(document, baos); //Fix this line lal
            document.open();
            addMetaData(document);
            addTitlePage(document);
            addContent(document);
            document.close();

            return baos;

        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return null;
    }

    private static void addMetaData(Document document) {
        document.addTitle("Examination");
        document.addSubject("Examination of patient");
        document.addKeywords("Java, PDF, sensitive");
        document.addAuthor("EMRApplication");
        document.addCreator(username);
    }

    private static void addTitlePage(Document document)throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("VScan Report", catFont));
        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph("Report generated by Vscan user:  " + username + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallerBold));
        addEmptyLine(preface, 1);
        addEmptyLine(preface, 1);

        // TABLE GENERATION STARTS HERE
        // Needs getMethods for names and info to populate table cells.
        /*
        PdfPTable tbl = new PdfPTable(2);
        tbl.setWidthPercentage(100);

        Phrase phrase = new Phrase();
        phrase.add(new Chunk("First name: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(1), smallerItalic));
        PdfPCell cell = new PdfPCell(phrase);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);

        phrase = new Phrase();
        phrase.add(new Chunk("Patient ID: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(0), smallerItalic));
        cell = new PdfPCell(phrase);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);

        phrase = new Phrase();
        phrase.add(new Chunk("Last name: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(2), smallerItalic));
        cell = new PdfPCell(phrase);
        cell.disableBorderSide(Rectangle.BOX);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        tbl.addCell(cell);

        phrase = new Phrase();
        phrase.add(new Chunk("Exam: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(3), smallerItalic));
        cell = new PdfPCell(phrase);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);

        phrase = new Phrase();
        phrase.add(new Chunk("Date of birth: ", smallBold));
        //phrase.add(new Chunk(ssnToDateOfBirth(examinationdata.get(0)), smallerItalic));
        phrase.add(new Chunk("lol", smallerItalic));
        cell = new PdfPCell(phrase);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);

        phrase = new Phrase();
        phrase.add(new Chunk("Exam time: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(4), smallerItalic));
        cell = new PdfPCell(phrase);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);

        phrase = new Phrase();
        phrase.add(new Chunk("Exam comment: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(5), smallerItalic));
        cell = new PdfPCell(phrase);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);

        cell = new PdfPCell(new Phrase("", smallBold));
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);
        */

        PdfPTable tbl = new PdfPTable(2);
        tbl.setWidthPercentage(100);
        //
        Phrase phrase = new Phrase();
        phrase.add(new Chunk("First name: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(1), smallerItalic));
        PdfPCell cell = new PdfPCell(phrase);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);
        //
        phrase = new Phrase();
        phrase.add(new Chunk("Patient ID: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(0), smallerItalic));
        cell = new PdfPCell(phrase);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);
        //
        phrase = new Phrase();
        phrase.add(new Chunk("Last name: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(2), smallerItalic));
        cell = new PdfPCell(phrase);
        cell.disableBorderSide(Rectangle.BOX);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        tbl.addCell(cell);
        //
        phrase = new Phrase();
        phrase.add(new Chunk("Exam: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(3), smallerItalic));
        cell = new PdfPCell(phrase);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);
        //
        phrase = new Phrase();
        phrase.add(new Chunk("Date of birth: ", smallBold));
        phrase.add(new Chunk("09.10.1991", smallerItalic)); //Todo: Fix!
        cell = new PdfPCell(phrase);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);
        //
        phrase = new Phrase();
        phrase.add(new Chunk("Exam time: ", smallBold));
        phrase.add(new Chunk(examinationdata.get(4), smallerItalic));
        cell = new PdfPCell(phrase);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);
        //
        phrase = new Phrase();
        phrase.add(new Chunk("Exam comment: ", smallBold));
        if(examinationdata.get(5) == null) phrase.add(new Chunk("", smallerItalic));
        else phrase.add(new Chunk(examinationdata.get(5), smallerItalic));
        cell = new PdfPCell(phrase);
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);
        //
        cell = new PdfPCell(new Phrase("", smallBold));
        cell.disableBorderSide(Rectangle.BOX);
        tbl.addCell(cell);



        // Adding to document.
        document.add(preface);
        document.add(tbl);

        // Start a new page
        document.newPage();
    }

    private static void addContent(Document document) throws DocumentException {

        Anchor anchor = new Anchor("Examination result", catFont);
        anchor.setName("Examination result");


        int index = 1;
        int x = 0;
        for(String i : imagePaths){
            Chapter catPart = new Chapter(new Paragraph(anchor), 1);

            Paragraph subPara = new Paragraph("Image " + index++, subFont);
            Section subCatPart = catPart.addSection(subPara);

            Image image = null;
            try {
                int indentation = 0;
                image = Image.getInstance(i);
                float scaler = ((document.getPageSize().getWidth() - document.leftMargin()
                        - document.rightMargin() - indentation) / image.getWidth()) * 100;
                image.scalePercent(scaler);
            }
            catch (IOException e) {e.printStackTrace(); }

            Paragraph imgParagraph = new Paragraph();
            imgParagraph.add(image);
            subCatPart.add(imgParagraph); //ADD image from path



            subPara = new Paragraph("Notes", subFont);
            subCatPart = catPart.addSection(subPara);
            subCatPart.add(new Paragraph(notes.get(x++)));


            document.add(catPart);


        }


    }


    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    private static String ssnToDateOfBirth(String ssn) {
        String dateOfBirth = ssn.substring(0, 6);
        String dateOfBirthFormatted = "";
        for (int i = 0; i < dateOfBirth.length(); i++) {
            dateOfBirthFormatted += dateOfBirth.charAt(i);
            if (i == 1 || i == 3) {
                dateOfBirthFormatted += ".";
            }
        }
        return dateOfBirthFormatted;
    }

}
